version: 2.1

@REM commands:
@REM   destroy-environment:
@REM     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
@REM     parameters:
@REM       # Add parameter here   
@REM     steps:
@REM       - run:
@REM           name: Destroy environments
@REM           when: on_fail
@REM           command: |
@REM             # Your code here
@REM             exit 1

@REM   revert-migrations:
@REM     description: Revert the last migration if successfully run in the current workflow.
@REM     parameters:
@REM       # Add parameter here     
@REM     steps:
@REM       - run:
@REM           name: Revert migrations
@REM           # Add when this will run
@REM           command: |
@REM             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
@REM             SUCCESS = 1
@REM             if(( $SUCCESS==1 )); 
@REM             then
@REM             #  cd ~/project/backend
@REM             #  npm install
@REM             #  Add revert code here. You can find this in the Getting Started section.
@REM               exit 1
@REM             fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
             cd frontend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps

@REM   test-frontend:
@REM     docker:
@REM       # Docker image here
@REM     steps:
@REM       # Checkout code from git
@REM       # Restore from cache
@REM       # Your job code here
                
@REM   test-backend:
@REM     docker:
@REM       # Docker image here
@REM     steps:
@REM       # Checkout code from git
@REM       # Restore from cache
@REM       # Your job code here
            
@REM   scan-frontend:
@REM     docker:
@REM       # Docker image here
@REM     steps:
@REM       # Checkout code from git
@REM       # Restore from cache
@REM       # Your job code here

@REM   scan-backend:
@REM     docker:
@REM       # Docker image here
@REM     steps:
@REM       # Checkout code from git
@REM       # Restore from cache
@REM       # Your job code here

@REM   deploy-infrastructure:
@REM     docker:
@REM       # Docker image here that supports AWS CLI
@REM     steps:
@REM       # Checkout code from git
@REM       - run:
@REM           name: Ensure back-end infrastructure exists
@REM           command: |
@REM             aws cloudformation deploy \
@REM               --template-file .circleci/files/backend.yml \
@REM               #--tags project=your-tag \
@REM               # --stack-name "your back-end stack name with workflow id" \
@REM               # --parameter-overrides ID="your workflow id"  
@REM               exit 1
@REM       - run:
@REM           name: Ensure front-end infrastructure exist
@REM           command: |
@REM             aws cloudformation deploy \
@REM               --template-file .circleci/files/frontend.yml \
@REM               #--tags project=your-tag \
@REM               # --stack-name "your front-end stack name with workflow id" \
@REM               # --parameter-overrides ID="your workflow id"  
@REM               exit 1
@REM       - run:
@REM           name: Add back-end ip to ansible inventory
@REM           command: |
@REM             # Your code here
@REM             exit 1
@REM       - persist_to_workspace:
@REM           root: ~/
@REM           paths:
@REM             - project/.circleci/ansible/inventory.txt
@REM       # Here's where you will add some code to rollback on failure      

@REM   configure-infrastructure:
@REM     docker:
@REM       # Docker image here that supports Ansible
@REM     steps:
@REM       # Checkout code from git
@REM       # Add ssh keys with fingerprint
@REM       # attach workspace
@REM       - run:
@REM           name: Install dependencies
@REM           command: |
@REM             # Your code here
@REM             exit 1
@REM       - run:
@REM           name: Configure server
@REM           command: |
@REM             # Your code here
@REM             exit 1
@REM       # Here's where you will add some code to rollback on failure      

@REM   run-migrations:
@REM     docker:
@REM       # Docker image here that supports NodeJS
@REM     steps:
@REM       # Checkout code from git
@REM       - run:
@REM           name: Run migrations
@REM           command: |
@REM             # Your code here
@REM             exit 1
@REM       - run:
@REM           name: Send migration results to memstash
@REM           command: |
@REM             # Your code here
@REM             exit 1
@REM      # Here's where you will add some code to rollback on failure      

@REM   deploy-frontend:
@REM     docker:
@REM       # Docker image here that supports AWS CLI
@REM     steps:
@REM       # Checkout code from git
@REM       - run:
@REM           name: Install dependencies
@REM           command: |
@REM             # your code here
@REM       - run:
@REM           name: Get backend url
@REM           command: |
@REM             # your code here
@REM             export API_URL="http://${BACKEND_IP}:3030"
@REM             echo "${API_URL}"
@REM       - run:
@REM           name: Deploy frontend objects
@REM           command: |
@REM             # your code here
@REM       # Here's where you will add some code to rollback on failure      
                    
@REM   deploy-backend:
@REM     docker:
@REM       # Docker image here that supports Ansible
@REM     steps:
@REM       # Checkout code from git
@REM       # Add ssh keys with fingerprint
@REM       # attach workspace
@REM       - run:
@REM           name: Install dependencies
@REM           command: |
@REM             # your code here
@REM       - run:
@REM           name: Deploy backend
@REM           command: |
@REM             # your code here
@REM       # Here's where you will add some code to rollback on failure  

@REM   smoke-test:
@REM     docker:
@REM       # Lightweight Docker image 
@REM     steps:
@REM       # Checkout code from git
@REM       - run:
@REM           name: Install dependencies
@REM           command: |
@REM             # your code here
@REM       - run:
@REM           name: Get backend url
@REM           command: |
@REM             # your code here
@REM       - run:
@REM           name: Backend smoke test.
@REM           command: |
@REM             # your code here
@REM       - run:
@REM           name: Frontend smoke test.
@REM           command: |
@REM             # your code here
@REM       # Here's where you will add some code to rollback on failure  

@REM   cloudfront-update:
@REM     docker:
@REM       # Docker image here that supports AWS CLI
@REM     steps:
@REM       # Checkout code from git
@REM       - run:
@REM           name: Install dependencies
@REM           command: |
@REM             # your code here
@REM       - run:
@REM           name: Update cloudfront distribution
@REM           command: |
@REM             # your code here
@REM       # Here's where you will add some code to rollback on failure  

@REM cleanup:
@REM     docker:
@REM       # Docker image here
@REM     steps:
@REM       # Checkout code from git
@REM       - run:
@REM           name: Get old stack workflow id
@REM           command: |
@REM             # your code here
@REM             export OldWorkflowID="the id here"
@REM             export STACKS=[] #put the list of stacks here
@REM       - run:
@REM           name: Remove old stacks and files
@REM           command: |
@REM             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
@REM             then
@REM               # your code here
@REM             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      @REM - test-frontend:
      @REM     requires: [build-frontend]
      @REM - test-backend:
      @REM     requires: [build-backend]
      @REM - scan-backend:
      @REM     requires: [build-backend]
      @REM - scan-frontend:
      @REM     requires: [build-frontend]
      @REM - deploy-infrastructure:
      @REM     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      @REM     filters:
      @REM       branches:
      @REM         only: [test-feature-branch]
      @REM - configure-infrastructure:
      @REM     requires: [deploy-infrastructure]
      @REM - run-migrations:
      @REM     requires: [configure-infrastructure]
      @REM - deploy-frontend:
      @REM     requires: [run-migrations]
      @REM - deploy-backend:
      @REM     requires: [run-migrations]
      @REM - smoke-test:
      @REM     requires: [deploy-backend, deploy-frontend]
      @REM - cloudfront-update:
      @REM     requires: [smoke-test]
      @REM - cleanup:
      @REM     requires: [cloudfront-update]